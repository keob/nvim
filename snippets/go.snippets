snippet todo "Todo"
	// TODO: ${0}

snippet im "import"
	import "${0}"

snippet ims "import block"
	import (
		"${0}"
	)

snippet var "variable declaration"
	var ${1:name} ${2:type}

snippet co "single constant"
	const ${1:name} = ${0:value}

snippet cos "multiple constant"
	const (
		${1:name} = ${0:value}
	)

snippet tyf "type function declaration"
	type ${1:name} func($2) ${0}

snippet tyi "type interface declaration"
	type ${1:name} interface {
		${0}
	}

snippet tys "type struct declaration"
	type ${1:name} struct {
		${0}
	}

snippet pkgm "main package function"
	package main

	func main() {
		${0}
	}

snippet main "main function"
	func main() {
		${0}
	}

snippet func "function declaration"
	func ${1:name}(${2:params}) ${3:ret} {
		${0}
	}

snippet swi "switch statement"
	switch ${1:expression} {
	case ${2:condition}:
		${0}
	}

snippet sel "select statement"
	select {
	case ${1:condition}
		${0}
	}

snippet cs "case clause"
	case ${1:condition}:
		$0

snippet for "for loop"
	for ${1:i} := ${2:0}; ${1} < ${3}; ${1}${4:++} {
		${0}
	}

snippet forr "for range loop"
	for ${1:_, }${2:v} := range ${3} {
		${0}
	}

snippet ch "chan declaration"
	chan ${0:type}

snippet map "map declaration"
	map[${1:type}]${0:type}

snippet in "empty interface"
	interface{}

snippet if "if statement"
	if ${1:condition} {
		${0}
	}

snippet el "else branch"
	else {
		${0}
	}

snippet ife "if else"
	if ${1:condition} {
		${2}
	} else {
		${0}
	}

snippet elif "else if"
	else if ${1:condition} {
		${0}
	}

snippet err "if err != nil"
	if err != nil {
		${0}
	}

snippet fpf "fmt.Printf()"
	fmt.Printf("${1}", ${0})

snippet fsf "fmt.Sprintf()"
	fmt.Sprintf("${1}", ${0})

snippet fff "fmt.Fprintf()"
	fmt.Fprintf(${1}, "${2}", ${0})

snippet lpf "log.Printf()"
	log.Printf("${1}", ${0})

snippet fpl "fmt.Println()"
	fmt.Println("${0}")

snippet fsl "fmt.Sprintln()"
	fmt.Sprintln("${0}")

snippet ffl "fmt.Fprintln()"
	fmt.Fprintln(${1}, ${0})

snippet lpl "log.Println()"
	log.Println(${0})

snippet lff "log.Fatalf()"
	log.Fatalf("${1}", ${0})

snippet fef "fmt.Errorf()"
	fmt.Errorf("${1}", ${0})

snippet mk "make statement"
	make(${1:type}, ${2:size}${0})

snippet new "new statement"
	new(${0:type})

snippet pn "panic"
	panic(${0})

snippet wr "rew req"
	${1:w} http.ResponseWriter, ${0:r} *http.Request

snippet hand "http handler declaration"
	func ${1:name}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {
		${0}
	}

snippet las "listen and serve"
	http.ListenAndServe("${1:addr}", ${0:handler})

snippet go "goroutine anonymous function"
	go func($1) {
		${0}
	}($2)

snippet gf "goroutine function"
	go ${1:func}($0)

snippet df "defer statement"
	defer ${1:func}($0)

snippet tf "Test function"
	func Test${1}(t *testing.T) {
		${0}
	}

snippet bf "Benchmark function"
	func Benchmark$1(b *testing.B) {
		for ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {
			${0}
		}
	}

snippet ef "Example function"
	func Example${1}() {
		${0}
		// Output:
		// ${2}
	}

snippet init "init function"
	func init() {
		${0}
	}

snippet meth "method declaration"
	func (${1:receiver} ${2:type}) ${3:name}(${4}) $5 {
		${0}
	}

snippet mp "method point declaration"
	func (${1:receiver} *${2:type}) ${3:name}(${4}) $5 {
		${0}
	}
