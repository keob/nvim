{
    "allow": {
        "prefix": "allow",
        "body": "#[allow($0)]",
        "description": "#[allow()]"
    },
    "deny": {
        "prefix": "deny",
        "body": "#[deny($0)]",
        "description": "#[deny()]"
    },
    "macro_use": {
        "prefix": "mau",
        "body": "#[macro_use($0)]",
        "description": "#[macro_use()]"
    },
    "macro_export": {
        "prefix": "mae",
        "body": "#[macro_export]",
        "description": "#[macro_export]"
    },
    "cfg": {
        "prefix": "cfg",
        "body": "#[cfg($0)]",
        "description": "#[cfg()]"
    },
    "cfg_attr": {
        "prefix": "cfga",
        "body": "#[cfg_attr($1, $0)]",
        "description": "#[cfg_attr()]"
    },
    "cfg!": {
        "prefix": "mcfg",
        "body": "cfg!($0)",
        "description": "cfg macro"
    },
    "format": {
        "prefix": "format",
        "body": "format!(\"$0\")",
        "description": "format macro"
    },
    "panic": {
        "prefix": "panic",
        "body": "panic!(\"$0\")",
        "description": "panic macro"
    },
    "print": {
        "prefix": "pt",
        "body": "print!(\"$0\")",
        "description": "print macro"
    },
    "print format": {
        "prefix": "pf",
        "body": "print!(\"$1\", $0)",
        "description": "print format macro"
    },
    "println": {
        "prefix": "pln",
        "body": "println!(\"$0\")",
        "description": "println macro"
    },
    "println format": {
        "prefix": "plf",
        "body": "println!(\"$1\", $0)",
        "description": "println format macro"
    },
    "stringify": {
        "prefix": "strify",
        "body": "stringify!($0)",
        "description": "stringify macro"
    },
    "vec": {
        "prefix": "vec",
        "body": "vec![$0]",
        "description": "vec macro"
    },
    "Err": {
        "prefix": "err",
        "body": "Err($0)",
        "description": "Err"
    },
    "Ok": {
        "prefix": "ok",
        "body": "Ok(${0:result})",
        "description": "Ok"
    },
    "Some": {
        "prefix": "some",
        "body": "Some($0)",
        "description": "Some"
    },
    "bench": {
        "prefix": "bench",
        "body": "#[bench]\nfn ${1:name}(b: &mut test::Bencher) {\n\t${2:b.iter(|| $0)}\n}",
        "description": "bench function"
    },
    "const": {
        "prefix": "const",
        "body": "const ${1:CONST}: ${2:Type} = ${0:init};",
        "description": "const"
    },
    "derive": {
        "prefix": "derive",
        "body": "#[derive($0)]",
        "description": "#[derive()]"
    },
    "else": {
        "prefix": "else",
        "body": "else {\n\t$0\n}",
        "description": "else block"
    },
    "enum": {
        "prefix": "enum",
        "body": "enum ${1:Name} {\n\t${0:Variant},\n}",
        "description": "enum block"
    },
    "fn": {
        "prefix": "fn",
        "body": "fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {\n\t$0\n}",
        "description": "function"
    },
    "for": {
        "prefix": "for",
        "body": "for ${1:pat} in ${2:expr} {\n\t$0\n}",
        "description": "for in loop"
    },
    "if-let": {
        "prefix": "iflet",
        "body": "if let ${1:Some(pat)} = ${2:expr} {\n\t$0\n}",
        "description": "if let"
    },
    "if": {
        "prefix": "if",
        "body": "if ${1:condition} {\n\t$0\n}",
        "description": "if block"
    },
    "impl-trait": {
        "prefix": "implt",
        "body": "impl ${1:Trait} for ${2:Type} {\n\t$0\n}",
        "description": "impl trait"
    },
    "impl": {
        "prefix": "impl",
        "body": "impl ${1:Type} {\n\t$0\n}",
        "description": "impl block"
    },
    "inline-fn": {
        "prefix": "infn",
        "body": "#[inline]\npub fn ${1:name}() {\n\t$0\n}",
        "description": "inline function"
    },
    "let": {
        "prefix": "let",
        "body": "let ${1:pat} = ${0:expr};",
        "description": "let"
    },
    "loop": {
        "prefix": "loop",
        "body": "loop {\n\t$0\n}",
        "description": "loop block"
    },
    "macro_rules": {
        "prefix": "mru",
        "body": "macro_rules! ${1:name} {\n\t(${2}) => (${0})\n}",
        "description": "macro rules"
    },
    "main": {
        "prefix": "main",
        "body": "fn main() {\n\t$0\n}",
        "description": "main function"
    },
    "match": {
        "prefix": "match",
        "body": "match ${1:expr} {\n\t$2 => $0,\n}",
        "description": "match block"
    },
    "mod": {
        "prefix": "mod",
        "body": "mod ${0:name};",
        "description": "mod"
    },
    "mod-block": {
        "prefix": "modb",
        "body": "mod ${1:name} {\n\t$0\n}",
        "description": "mod block"
    },
    "static": {
        "prefix": "static",
        "body": "static ${1:STATIC}: ${2:Type} = ${0:init};",
        "description": "static"
    },
    "struct-tuple": {
        "prefix": "stt",
        "body": "struct ${1:Name}(${0:Type});",
        "description": "tuple struct"
    },
    "struct-unit": {
        "prefix": "stu",
        "body": "struct ${0:Name};",
        "description": "unit struct"
    },
    "struct": {
        "prefix": "st",
        "body": "struct ${1:Name} {\n\t${2:field}: ${0:Type},\n}",
        "description": "struct block"
    },
    "test": {
        "prefix": "test",
        "body": "#[test]\nfn ${1:name}() {\n\t$0\n}",
        "description": "test function"
    },
    "trait": {
        "prefix": "trait",
        "body": "trait ${1:Name} {\n\t$0;\n}",
        "description": "trait block"
    },
    "type": {
        "prefix": "type",
        "body": "type ${1:Alias} = ${0:Type};",
        "description": "type alias"
    },
    "while-let": {
        "prefix": "whlet",
        "body": "while let ${1:Some(pat)} = ${2:expr} {\n\t$0\n}",
        "description": "while let"
    },
    "while": {
        "prefix": "while",
        "body": "while ${1:condition} {\n\t$0\n}",
        "description": "while block"
    }
}
